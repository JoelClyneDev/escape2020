{"version":3,"sources":["assets/caution-642510.jpg","assets/viper_nora.otf","siteContent.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","websiteContent","Title","Description_header","Description_Body","Credits","Disclaimer","Credits1","Credits2","Credits3","Credits4","Credits5","Credits6","Credits7","Credits8","Credits9","App","style","display","maxWidth","minHeight","src","require","minWidth","textAlign","color","fontFamily","fontSize","width","height","frameborder","target","href","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"2FAAAA,EAAOC,QAAU,IAA0B,4C,0FCA3CD,EAAOC,QAAU,IAA0B,wC,wECiB5BC,G,WAjBQ,CACnBC,MAAO,eACPC,mBAAoB,iBACpBC,iBAAkB,+BAClBC,QAAS,UACTC,WAAY,uFACZC,SAAU,qBACVC,SAAU,aACVC,SAAU,gBACVC,SAAU,oBACVC,SAAU,oBACVC,SAAU,eACVC,SAAU,YACVC,SAAU,cACVC,SAAU,gB,MCsBCC,MA9Bf,WACE,OACF,yBAAKC,MAAO,CAACC,QAAS,SAClB,yBAAKD,MAAO,CAACE,SAAU,OAAQD,QAAS,QAASE,UAAU,SAASC,IAAKC,EAAQ,KACjF,yBAAKL,MAAO,CAACM,SAAU,OAAQC,UAAW,SAAUC,MAAM,UAAWC,WAAW,UAC9E,4BAAKzB,EAAeC,OACpB,wBAAIe,MAAO,CAACQ,MAAO,MAAOE,SAAU,OAAQD,WAAY,eAAgBzB,EAAeK,YACvF,4BAAQe,IAAI,0IAA0JO,MAAM,QAAQC,OAAO,QAAQC,YAAY,KAA/M,uBAAuO,uBAAGC,OAAO,SAASC,KAAK,sBAAxB,oBAAvO,6BAAkU,uBAAGD,OAAO,SAASC,KAAK,8BAAxB,UAAlU,KACA,4BAAK/B,EAAeE,oBACpB,2BAAIF,EAAeG,kBACnB,4BAAKH,EAAeI,SACpB,yBAAKY,MAAO,CAACS,WAAY,eACvB,wBAAIT,MAAO,CAACS,WAAY,UAAWzB,EAAeM,UAClD,2BAAIN,EAAeO,UACnB,2BAAIP,EAAeQ,UACnB,wBAAIQ,MAAO,CAACS,WAAY,UAAWzB,EAAeS,UAClD,2BAAIT,EAAeW,UACnB,2BAAIX,EAAeY,UACnB,2BAAIZ,EAAeQ,UACnB,wBAAIQ,MAAO,CAACS,WAAY,UAAWzB,EAAeU,UAClD,2BAAIV,EAAea,UACnB,2BAAIb,EAAec,YAIvB,yBAAKE,MAAO,CAACE,SAAU,OAAQD,QAAS,QAASE,UAAU,SAASC,IAAKC,EAAQ,OCnBjEW,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.8bc25e93.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/caution-642510.a401c2d8.jpg\";","module.exports = __webpack_public_path__ + \"static/media/viper_nora.91985fd3.otf\";","const websiteContent = {\r\n    Title: \"ESCAPE: 2020\",\r\n    Description_header: \"About the game\",\r\n    Description_Body: \"Insert DESCIRPTION-BODY here\",\r\n    Credits: \"Credits\",\r\n    Disclaimer: \"This game contains information about sensitive events. Viewer discretion is advised.\",\r\n    Credits1: \"Website Developers\",\r\n    Credits2: \"Joel Clyne\",\r\n    Credits3: \"Diana Diakete\",\r\n    Credits4: \"Graphic Designers\", \r\n    Credits5: \"Concept Designers\",\r\n    Credits6: \"Tongxin Chen\",\r\n    Credits7: \"Grace Lin\",\r\n    Credits8: \"Sophia Chen\",\r\n    Credits9: \"Dechen Rota\"\r\n}\r\n\r\nexport default websiteContent","import React from 'react';\nimport './App.css';\nimport websiteContent from './siteContent'\nimport './assets/viper_nora.otf'\n\n\nfunction App() {\n  return (\n<div style={{display: 'flex'}}>\n    <img style={{maxWidth: \"25vw\", display: \"block\", minHeight:\"100vh\"}}src={require('./assets/caution-642510.jpg')}></img>\n    <div style={{minWidth: '50vw', textAlign: \"center\", color:\"#000000\", fontFamily:\"viper\"}}>\n      <h1>{websiteContent.Title}</h1>\n      <h2 style={{color: \"red\", fontSize: \"20px\", fontFamily: \"sans-serif\"}}>{websiteContent.Disclaimer}</h2>\n      <iframe src=\"https://onedrive.live.com/embed?cid=81B4805C909EB4A1&amp;resid=81B4805C909EB4A1%212408&amp;authkey=AN2saMVYEbhlIu0&amp;em=2&amp;wdAr=1.7777777777777777\" width=\"962px\" height=\"565px\" frameborder=\"0\">This is an embedded <a target=\"_blank\" href=\"https://office.com\">Microsoft Office</a> presentation, powered by <a target=\"_blank\" href=\"https://office.com/webapps\">Office</a>.</iframe>\n      <h2>{websiteContent.Description_header}</h2>\n      <p>{websiteContent.Description_Body}</p>\n      <h2>{websiteContent.Credits}</h2>\n      <div style={{fontFamily: \"sans-serif\"}}>\n        <h3 style={{fontFamily: \"viper\"}}>{websiteContent.Credits1}</h3>\n        <p>{websiteContent.Credits2}</p>\n        <p>{websiteContent.Credits3}</p>\n        <h3 style={{fontFamily: \"viper\"}}>{websiteContent.Credits4}</h3>\n        <p>{websiteContent.Credits6}</p>\n        <p>{websiteContent.Credits7}</p>\n        <p>{websiteContent.Credits3}</p>\n        <h3 style={{fontFamily: \"viper\"}}>{websiteContent.Credits5}</h3>\n        <p>{websiteContent.Credits8}</p>\n        <p>{websiteContent.Credits9}</p>\n      </div>\n      \n    </div>\n    <img style={{maxWidth: \"25vw\", display: \"block\", minHeight:\"100vh\"}}src={require('./assets/caution-642510.jpg')}></img>\n  </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}